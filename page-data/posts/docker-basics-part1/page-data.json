{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/docker-basics-part1","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker Basics - Part 1, Images & Containers\",\n  \"slug\": \"docker-basics-part1\",\n  \"image\": \"./images/main_images_containers.png\",\n  \"date\": \"2021-02-24T00:00:00.000Z\",\n  \"author\": \"youngjae lim\",\n  \"published\": true,\n  \"category\": \"Docker\",\n  \"tags\": [\"docker\", \"tool\"],\n  \"readTime\": 10\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"docker-basics-part-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Docker Basics Part 1\", mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#docker-basics-part-1\",\n    \"aria-label\": \"docker basics part 1 permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"h2\", {\n    \"id\": \"images--containers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Images & Containers\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#images--containers\",\n    \"aria-label\": \"images  containers permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"h3\", {\n    \"id\": \"images\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Images\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#images\",\n    \"aria-label\": \"images permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Images are one of the two core building blocks Docker is all about (the other one is\\n\\\"Containers\\\").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Images are blueprints / templates for containers. They are read-only and contain the\\napplication as well as the necessary application environment (operating system, runtimes, tools,\\n...).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Images do not run themselves, instead, they can be executed as containers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Images are either pre-built (e.g. official Images you find on DockerHub) or you build your own\\nImages by defining a Dockerfile.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dockerfiles contain instructions which are executed when an image is built ( docker build . ),\\nevery instruction then creates a layer in the image. Layers are used to efficiently rebuild and\\nshare images.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The CMD instruction is special: It's not executed when the image is built but when a container\\nis created and started based on that image.\")), mdx(\"h3\", {\n    \"id\": \"containers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Containers\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#containers\",\n    \"aria-label\": \"containers permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Containers are the other key building block Docker is all about.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Containers are running instances of Images. When you create a container (via docker run ), a\\nthin read-write layer is added on top of the Image.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiple Containers can therefore be started based on one and the same Image. All\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Containers run in isolation, i.e. they don't share any application state or written data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You need to create and start a Container to start the application which is inside of a Container. So\\nit's Containers which are in the end executed - both in development and production.\")), mdx(\"h3\", {\n    \"id\": \"key-docker-commands\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Key Docker Commands\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#key-docker-commands\",\n    \"aria-label\": \"key docker commands permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"p\", null, \"For a full list of all commands, add --help after a command - e.g. docker --help , docker run\\n--help etc.\\nAlso view the official docs for a full, detailed documentation of ALL commands and features: https:\\n//docs.docker.com/engine/reference/run/\"), mdx(\"blockquote\", {\n    display: \"info\"\n  }, \"Important: This can be overwhelming! You'll only need a fraction of those features and commands in reality!\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker build .\"), \": Build a Dockerfile and create your own Image based on the file\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-t NAME:TAG\"), \": Assign a NAME and a TAG to an image\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker run IMAGE_NAME\"), \": Create and start a new container based on image IMAGENAME (or\\nuse the image id)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--name NAME\"), \": Assign a NAME to the container. The name can be used for stopping and\\nremoving etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-d\"), \": Run the container in detached mode - i.e. output printed by the container is not\\nvisible, the command prompt / terminal does NOT wait for the container to stop\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-it\"), \": Run the container in \\\"interactive\\\" mode - the container / application is then\\nprepared to receive input via the command prompt / terminal. You can stop the\\ncontainer with CTRL + C when using the -it flag\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--rm\"), \": Automatically remove the container when it's stopped\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker ps\"), \": List all running containers\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-a\"), \": List all containers - including stopped ones\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker images\"), \": List all locally stored images\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker rm CONTAINER\"), \": Remove a container with name CONTAINER (you can also use the\\ncontainer id)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker rmi IMAGE\"), \": Remove an image by name / id\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker container prune\"), \": Remove all stopped containers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker image prune\"), \": Remove all dangling images (untagged images)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-a\"), \": Remove all locally stored images\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker push IMAGE\"), \": Push an image to DockerHub (or another registry) - the image name/\\ntag must include the repository name/ url\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker pull IMAGE\"), \": Pull (download) an image from DockerHub (or another registry) - this\\nis done automatically if you just docker run IMAGE and the image wasn't pulled before\")), mdx(Link, {\n    to: \"/posts\",\n    className: \"btn center-btn\",\n    mdxType: \"Link\"\n  }, \"all posts\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#docker-basics-part-1","title":"Docker Basics Part 1","items":[{"url":"#images--containers","title":"Images & Containers","items":[{"url":"#images","title":"Images"},{"url":"#containers","title":"Containers"},{"url":"#key-docker-commands","title":"Key Docker Commands"}]}]}]},"frontmatter":{"title":"Docker Basics - Part 1, Images & Containers","author":"youngjae lim","category":"Docker","tags":["docker","tool"],"slug":"docker-basics-part1","date":"February 24th, 2021","readTime":10,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/f3fe7d971773fb2013a92689e2e8585b/e646b/main_images_containers.png","srcSet":"/static/f3fe7d971773fb2013a92689e2e8585b/e2518/main_images_containers.png 219w,\n/static/f3fe7d971773fb2013a92689e2e8585b/bb6fe/main_images_containers.png 438w,\n/static/f3fe7d971773fb2013a92689e2e8585b/e646b/main_images_containers.png 876w","sizes":"(min-width: 876px) 876px, 100vw"},"sources":[{"srcSet":"/static/f3fe7d971773fb2013a92689e2e8585b/e01f2/main_images_containers.webp 219w,\n/static/f3fe7d971773fb2013a92689e2e8585b/8db67/main_images_containers.webp 438w,\n/static/f3fe7d971773fb2013a92689e2e8585b/0c51d/main_images_containers.webp 876w","type":"image/webp","sizes":"(min-width: 876px) 876px, 100vw"}]},"width":876,"height":578},"resize":{"src":"/static/f3fe7d971773fb2013a92689e2e8585b/f3583/main_images_containers.png","width":1200,"height":792}}},"embeddedImages":null,"videoSourceURL":null,"videoTitle":null},"excerpt":"Docker Basics Part 1 Images & Containers Images Images are one of the two core building blocks Docker is all about (the other one is\n\"Containers\"). Images are…"}},"pageContext":{"slug":"docker-basics-part1","previousPost":null,"nextPost":{"id":"ccc2916c-bf8e-5dd4-aa93-1bdb42948a8e","frontmatter":{"title":"Docker Basics - Part 2, Data & Volumes","slug":"docker-basics-part2","tags":["docker","tool"]},"excerpt":"Docker Basics Part 2 Data & Volumes Images are read-only - once they're created, they can't change (you have to rebuild them to\nupdate them…"},"relatedPosts":[{"id":"ccc2916c-bf8e-5dd4-aa93-1bdb42948a8e","frontmatter":{"title":"Docker Basics - Part 2, Data & Volumes","slug":"docker-basics-part2","tags":["docker","tool"]},"excerpt":"Docker Basics Part 2 Data & Volumes Images are read-only - once they're created, they can't change (you have to rebuild them to\nupdate them…"},{"id":"047ec41d-0ff2-5e7a-a5ba-990341cfc13f","frontmatter":{"title":"Docker Basics - Part 3, Docker Networks","slug":"docker-basics-part3","tags":["docker","tool"]},"excerpt":"Docker Basics Part 3 Networks / Requests In many application, you'll need more than one container - for two main reasons: It's considered a…"},{"id":"548eb3a7-5983-53c9-bfbe-1d0d9fc5ce71","frontmatter":{"title":"Docker Basics - Part 4, Docker Compose","slug":"docker-basics-part4","tags":["docker","tool"]},"excerpt":"Docker Basics Part 4 Docker Compose Docker Compose is an additional tool, offered by the Docker ecosystem, which helps with\norchestration…"}]}},"staticQueryHashes":["1552795008","2356771501","3156252089"]}