{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/datasette","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Datasette\",\n  \"slug\": \"datasette\",\n  \"image\": \"./images/main.png\",\n  \"date\": \"2022-02-24T00:00:00.000Z\",\n  \"author\": \"youngjae lim\",\n  \"category\": \"Data\",\n  \"tags\": [\"data\", \"tool\", \"data analysis\", \"data publishing\", \"python\"],\n  \"readTime\": 50,\n  \"embeddedImages\": [\"./images/html-1.png\", \"./images/html-2.png\", \"./images/html-3.png\"],\n  \"videoSourceURL\": \"https://youtu.be/1npWH0rPOnI\",\n  \"videoTitle\": \"Deploying Sites to GitHub Pages using GitHub Actions\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"what-is-datasette\"\n  }, \"What is Datasette?\"), mdx(\"h1\", {\n    \"id\": \"installation\"\n  }, \"Installation\"), mdx(\"h2\", {\n    \"id\": \"using-homebrew-for-mac\"\n  }, \"Using Homebrew for Mac\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"brew install datasette\\n\\ndatasette --version\\n\")), mdx(\"h3\", {\n    \"id\": \"sqlite-utils\"\n  }, \"sqlite-utils\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sqlite-utils\"), \"\\xA0is python CLI utility and library for manipulating SQLite databases that can be a great companion with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Datasette\"), \".\"), mdx(\"p\", null, \"You can brew-install this tool as well:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"brew install sqlite-utils\\nsqlite-utils --help\\n\")), mdx(\"p\", null, \"All options and commands of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sqlite-utils\"), \" command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\nUsage: sqlite-utils [OPTIONS] COMMAND [ARGS]...\\n\\n  Commands for interacting with a SQLite database\\n\\nOptions:\\n  --version   Show the version and exit.\\n  -h, --help  Show this message and exit.\\n\\nCommands:\\n  query*                Execute SQL query and return the results as JSON\\n  add-column            Add a column to the specified table\\n  add-foreign-key       Add a new foreign key constraint to an existing...\\n  add-foreign-keys      Add multiple new foreign key constraints to a...\\n  add-geometry-column   Add a SpatiaLite geometry column to an existing...\\n  analyze               Run ANALYZE against the whole database, or...\\n  analyze-tables        Analyze the columns in one or more tables\\n  bulk                  Execute parameterized SQL against the provided...\\n  convert               Convert columns using Python code you supply.\\n  create-database       Create a new empty database file\\n  create-index          Add an index to the specified table for the...\\n  create-spatial-index  Create a spatial index on a SpatiaLite geometry...\\n  create-table          Add a table with the specified columns.\\n  create-view           Create a view for the provided SELECT query\\n  disable-fts           Disable full-text search for specific table\\n  disable-wal           Disable WAL for database files\\n  drop-table            Drop the specified table\\n  drop-view             Drop the specified view\\n  dump                  Output a SQL dump of the schema and full contents...\\n  enable-counts         Configure triggers to update a _counts table with...\\n  enable-fts            Enable full-text search for specific table and...\\n  enable-wal            Enable WAL for database files\\n  extract               Extract one or more columns into a separate table\\n  index-foreign-keys    Ensure every foreign key column has an index on it\\n  indexes               Show indexes for the whole database or specific...\\n  insert                Insert records from FILE into a table, creating...\\n  insert-files          Insert one or more files using BLOB columns in...\\n  memory                Execute SQL query against an in-memory database,...\\n  optimize              Optimize all full-text search tables and then run...\\n  populate-fts          Re-populate full-text search for specific table...\\n  rebuild-fts           Rebuild all or specific full-text search tables\\n  reset-counts          Reset calculated counts in the _counts table\\n  rows                  Output all rows in the specified table\\n  schema                Show full schema for this database or for...\\n  search                Execute a full-text search against this table\\n  tables                List the tables in the database\\n  transform             Transform a table beyond the capabilities of...\\n  triggers              Show triggers configured in this database\\n  upsert                Upsert records based on their primary key.\\n  vacuum                Run VACUUM against the database\\n  views                 List the views in the database\\n\")), mdx(\"h3\", {\n    \"id\": \"example-nyc-street-tree-census-data\"\n  }, \"Example: NYC Street Tree Census Data\"), mdx(\"h4\", {\n    \"id\": \"data---nyc-street-tree-census-data\"\n  }, \"Data - NYC Street Tree Census Data\"), mdx(\"p\", null, \"Let's download NYC Street Tree Census data from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/uvpi-gqnh\"\n  }, \"NYC OpenData\"), \".\"), mdx(\"h4\", {\n    \"id\": \"csv-data-to-sqlite-database\"\n  }, \"CSV Data to Sqlite Database\"), mdx(\"p\", null, \"Then put the downloaded csv data into sqlite database using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sqlite-utils\"), \".\"), mdx(\"p\", null, \"Go into the directory that contains the csv data and run the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Insert the csv data into a table called nyctrees in sqlite database.\\nsqlite-utils insert nyctrees.db nyctrees 2015_Street_Tree_Census_-_Tree_Data.csv --csv\\n\")), mdx(\"p\", null, \"Once the inserting is done, you should see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nyctrees.db\"), \" created in the current working direcotry.\"), mdx(\"p\", null, \"Let's open up the database with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Datasette\"), \": this will spin up the http web server to run datasette web application.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"datasette nyctrees.db\\n\")), mdx(\"p\", null, \"Click the url from the output message to open up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Datasette\"), \" in the web browser. You should see the webpage loaded like this:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"\",\n    \"alt\": \"datasette-home\"\n  })), mdx(\"h4\", {\n    \"id\": \"datasette-cluster-map-plugin\"\n  }, \"datasette-cluster-map plugin\"), mdx(\"p\", null, \"Because the data has some geographical information in it, we would like to install datasette plugin called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"datasette-cluster-map\"), \" to show interactive map for tree locations. Stop the server and install the plugin.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Install the plugin\\ndatasette isntall datasette-cluster-map\\n\\n# Restart the server\\ndatasette nyctrees.db\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"\",\n    \"alt\": \"datasette-map\"\n  })), mdx(\"h4\", {\n    \"id\": \"extract-a-column-into-a-separate-table\"\n  }, \"Extract a column into a separate table\"), mdx(\"p\", null, \"Extracting is for extracting one or more columns into a separate table.\"), mdx(\"p\", null, \"Because I am interested in the types of tree species, let's take a close look at it by extracting into a separate table:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sqlite-utils extract nyctrees.db nyctrees spc_common\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"\",\n    \"alt\": \"datasette-extract-1\"\n  }), \"\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"\",\n    \"alt\": \"datasette-extract-2\"\n  }), \"\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"\",\n    \"alt\": \"datasette-extract-3\"\n  })), mdx(\"h4\", {\n    \"id\": \"enable-full-text-search\"\n  }, \"Enable full-text search\"), mdx(\"p\", null, \"You can also enable full-text search for the table. Here let's enable for address column so that we can search by address.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sqlite-utils enable-fts nyctrees.db nyctrees address\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"\",\n    \"alt\": \"datasette-search\"\n  })), mdx(\"h4\", {\n    \"id\": \"faceting-by-a-column\"\n  }, \"Faceting by a column\"), mdx(\"h4\", {\n    \"id\": \"publish-data\"\n  }, \"Publish data\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"datasette publish --help\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[OPTIONS] COMMAND [ARGS]...\\n\\n  Publish specified SQLite database files to the internet along with a\\n  Datasette-powered interface and API\\n\\nOptions:\\n  --help  Show this message and exit.\\n\\nCommands:\\n  cloudrun  Publish databases to Datasette running on Cloud Run\\n  heroku    Publish databases to Datasette running on Heroku\\n\")), mdx(\"h4\", {\n    \"id\": \"publish-data-to-heroku\"\n  }, \"Publish data to Heroku\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"datasette publish heroku --help\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Usage: datasette publish heroku [OPTIONS] [FILES]...\\n\\n  Publish databases to Datasette running on Heroku\\n\\nOptions:\\n  -m, --metadata FILENAME         Path to JSON/YAML file containing metadata\\n                                  to publish\\n  --extra-options TEXT            Extra options to pass to datasette serve\\n  --branch TEXT                   Install datasette from a GitHub branch e.g.\\n                                  main\\n  --template-dir DIRECTORY        Path to directory containing custom\\n                                  templates\\n  --plugins-dir DIRECTORY         Path to directory containing custom plugins\\n  --static MOUNT:DIRECTORY        Serve static files from this directory at\\n                                  /MOUNT/...\\n  --install TEXT                  Additional packages (e.g. plugins) to\\n                                  install\\n  --plugin-secret <TEXT TEXT TEXT>...\\n                                  Secrets to pass to plugins, e.g. --plugin-\\n                                  secret datasette-auth-github client_id xxx\\n  --version-note TEXT             Additional note to show on /-/versions\\n  --secret TEXT                   Secret used for signing secure values, such\\n                                  as signed cookies\\n  --title TEXT                    Title for metadata\\n  --license TEXT                  License label for metadata\\n  --license_url TEXT              License URL for metadata\\n  --source TEXT                   Source label for metadata\\n  --source_url TEXT               Source URL for metadata\\n  --about TEXT                    About label for metadata\\n  --about_url TEXT                About URL for metadata\\n  -n, --name TEXT                 Application name to use when deploying\\n  --tar TEXT                      --tar option to pass to Heroku, e.g.\\n                                  --tar=/usr/local/bin/gtar\\n  --help                          Show this message and exit.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"datasette publish heroku nyctrees.db --title \\\"NYC Trees\\\" --install datasette-cluster-map\\n\")), mdx(Link, {\n    to: \"/posts\",\n    className: \"btn center-btn\",\n    mdxType: \"Link\"\n  }, \"all posts\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-is-datasette","title":"What is Datasette?"},{"url":"#installation","title":"Installation","items":[{"url":"#using-homebrew-for-mac","title":"Using Homebrew for Mac","items":[{"url":"#sqlite-utils","title":"sqlite-utils"},{"url":"#example-nyc-street-tree-census-data","title":"Example: NYC Street Tree Census Data","items":[{"url":"#data---nyc-street-tree-census-data","title":"Data - NYC Street Tree Census Data"},{"url":"#csv-data-to-sqlite-database","title":"CSV Data to Sqlite Database"},{"url":"#datasette-cluster-map-plugin","title":"datasette-cluster-map plugin"},{"url":"#extract-a-column-into-a-separate-table","title":"Extract a column into a separate table"},{"url":"#enable-full-text-search","title":"Enable full-text search"},{"url":"#faceting-by-a-column","title":"Faceting by a column"},{"url":"#publish-data","title":"Publish data"},{"url":"#publish-data-to-heroku","title":"Publish data to Heroku"}]}]}]}]},"frontmatter":{"title":"Datasette","author":"youngjae lim","category":"Data","tags":["data","tool","data analysis","data publishing","python"],"slug":"datasette","date":"February 24th, 2022","readTime":50,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/da6a00a6dd523df93aeb3fdf10e60fc2/bc68f/main.png","srcSet":"/static/da6a00a6dd523df93aeb3fdf10e60fc2/bc3bc/main.png 473w,\n/static/da6a00a6dd523df93aeb3fdf10e60fc2/133e4/main.png 946w,\n/static/da6a00a6dd523df93aeb3fdf10e60fc2/bc68f/main.png 1892w","sizes":"(min-width: 1892px) 1892px, 100vw"},"sources":[{"srcSet":"/static/da6a00a6dd523df93aeb3fdf10e60fc2/7c933/main.webp 473w,\n/static/da6a00a6dd523df93aeb3fdf10e60fc2/0a607/main.webp 946w,\n/static/da6a00a6dd523df93aeb3fdf10e60fc2/76cb4/main.webp 1892w","type":"image/webp","sizes":"(min-width: 1892px) 1892px, 100vw"}]},"width":1892,"height":931}}},"embeddedImages":[{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/2db8684ae721f1e298db3567dc3ac5c1/8cf60/html-1.png","srcSet":"/static/2db8684ae721f1e298db3567dc3ac5c1/81b70/html-1.png 250w,\n/static/2db8684ae721f1e298db3567dc3ac5c1/4a400/html-1.png 500w,\n/static/2db8684ae721f1e298db3567dc3ac5c1/8cf60/html-1.png 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/2db8684ae721f1e298db3567dc3ac5c1/81c3e/html-1.webp 250w,\n/static/2db8684ae721f1e298db3567dc3ac5c1/6e8bd/html-1.webp 500w,\n/static/2db8684ae721f1e298db3567dc3ac5c1/bf95e/html-1.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1000,"height":563}}},{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#281818","images":{"fallback":{"src":"/static/c25462be7467c1cce0ce06bf4a4a305f/8b2a7/html-2.png","srcSet":"/static/c25462be7467c1cce0ce06bf4a4a305f/17734/html-2.png 250w,\n/static/c25462be7467c1cce0ce06bf4a4a305f/86bab/html-2.png 500w,\n/static/c25462be7467c1cce0ce06bf4a4a305f/8b2a7/html-2.png 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/c25462be7467c1cce0ce06bf4a4a305f/2cd09/html-2.webp 250w,\n/static/c25462be7467c1cce0ce06bf4a4a305f/cd07d/html-2.webp 500w,\n/static/c25462be7467c1cce0ce06bf4a4a305f/7c5a2/html-2.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1000,"height":561}}},{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#888888","images":{"fallback":{"src":"/static/3eddd07e2669f120ff5f4fd70727bdab/8cf60/html-3.png","srcSet":"/static/3eddd07e2669f120ff5f4fd70727bdab/81b70/html-3.png 250w,\n/static/3eddd07e2669f120ff5f4fd70727bdab/4a400/html-3.png 500w,\n/static/3eddd07e2669f120ff5f4fd70727bdab/8cf60/html-3.png 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/3eddd07e2669f120ff5f4fd70727bdab/81c3e/html-3.webp 250w,\n/static/3eddd07e2669f120ff5f4fd70727bdab/6e8bd/html-3.webp 500w,\n/static/3eddd07e2669f120ff5f4fd70727bdab/bf95e/html-3.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1000,"height":563}}}],"videoSourceURL":"https://youtu.be/1npWH0rPOnI","videoTitle":"Deploying Sites to GitHub Pages using GitHub Actions"},"excerpt":"What is Datasette? Installation Using Homebrew for Mac sqlite-utils sqlite-utils  is python CLI utility and library for manipulating SQLite databases that can…"}},"pageContext":{"slug":"datasette","previousPost":{"id":"ef9f5506-806b-53f7-961d-426d5dc5506e","frontmatter":{"title":"How To Install Pyenv on MacOS","slug":"how-to-install-pyenv-on-macos"}},"nextPost":{"id":"53545235-bfd5-5187-8f0e-4a041efb68bd","frontmatter":{"title":"How To Set Up Tailwind CSS with the SvelteKit","slug":"how-to-setup-tailwind-sveltekit"}}}},"staticQueryHashes":["266133262","3156252089","3827573359"]}