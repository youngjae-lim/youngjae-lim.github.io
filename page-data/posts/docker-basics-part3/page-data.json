{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/docker-basics-part3","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker Basics - Part 3, Docker Networks\",\n  \"slug\": \"docker-basics-part3\",\n  \"image\": \"./images/main_docker_networks.png\",\n  \"date\": \"2021-03-27T00:00:00.000Z\",\n  \"author\": \"youngjae lim\",\n  \"category\": \"Docker\",\n  \"readTime\": 10\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"docker-basics-part-3\"\n  }, \"Docker Basics Part 3\"), mdx(\"h2\", {\n    \"id\": \"networks--requests\"\n  }, \"Networks / Requests\"), mdx(\"p\", null, \"In many application, you'll need more than one container - for two main reasons:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It's considered a good practice to focus each container on one main task (e.g. run a web\\nserver, run a database, ...)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It's very hard to configure a Container that does more than one \\\"main thing\\\" (e.g. run a\\nweb server AND a database)\")), mdx(\"p\", null, \"Multi-Container apps are quite common, especially if you're working on \\\"real applications\\\".\"), mdx(\"p\", null, \"Often, some of these Containers need to communicate though:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"either with each other\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"or with the host machine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"or with the world wide web\")), mdx(\"h3\", {\n    \"id\": \"communicating-with-the-world-wide-web-www\"\n  }, \"Communicating with the World Wide Web (WWW)\"), mdx(\"p\", null, \"Communicating with the WWW (i.e. sending Http request or other kinds of requests to other\\nservers) is thankfully very easy.\\nConsider this JavaScript example - though it'll always work, no matter which technology you're\\nusing:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"fetch('https://some-api.com/my-data').then(...)\\n\")), mdx(\"p\", null, \"This very basic code snippet tries to send a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"some-api.com/my-data\"), \".\"), mdx(\"p\", null, \"This will work out of the box, no extra configuration is required! The application, running in a\\nContainer, will have no problems sending this request.\"), mdx(\"h2\", {\n    \"id\": \"communicating-with-the-host-machine\"\n  }, \"Communicating with the Host Machine\"), mdx(\"p\", null, \"Communicating with the Host Machine (e.g. because you have a database running on the Host\\nMachine) is also quite simple, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"though it doesn't work without any changes.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"One important note\"), \": If you deploy a Container onto a server (i.e. another machine), it's very unlikely\\nthat you'll need to communicate with that machine. Communicating to the Host Machine typically is a\\nrequirement during development - for example because you're running some development database on\\nyour machine.\"), mdx(\"p\", null, \"Again, consider this JS example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"fetch('localhost:3000/demo').then(...)\\n\")), mdx(\"p\", null, \"This code snippet tries to send a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to some web server running on the local host\\nmachine (i.e. outside of the Container but not the WWW).\"), mdx(\"p\", null, \"On your local machine, this would work - inside of a Container, it will fail. Because localhost\\ninside of the Container refers to the Container environment, not to your local host machine\\nwhich is running the Container / Docker!\"), mdx(\"p\", null, \"But Docker has got you covered!\"), mdx(\"p\", null, \"You just need to change this snippet like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"fetch('host.docker.internal:3000/demo').then(...)\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"host.docker.internal\"), \" is a special address / identifier which is translated to the IP address of\\nthe machine hosting the Container by Docker.\"), mdx(\"blockquote\", {\n    display: \"info\"\n  }, \"Important: \\\"Translated\\\" does not mean that Docker goes ahead and changes the source code. Instead, it simply detects the outgoing request and is able to resolve the IP address for that request.\"), mdx(\"h2\", {\n    \"id\": \"communicating-with-other-containers\"\n  }, \"Communicating with Other Containers\"), mdx(\"p\", null, \"Communicating with other Containers is also quite straightforward. You have two main options:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Manually find out the IP of the other Container (it may change though)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use Docker Networks and put the communicating Containers into the same Network\")), mdx(\"p\", null, \"Option 1 is not great since you need to search for the IP on your own and it might change over\\ntime.\"), mdx(\"p\", null, \"Option 2 is perfect though. With Docker, you can create Networks via docker network create\\nSOME_NAME and you can then attach multiple Containers to one and the same Network.\"), mdx(\"p\", null, \"Like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"docker run -network my-network --name cont1 my-image\\ndocker run -network my-network --name cont2 my-other-image\\n\")), mdx(\"p\", null, \"Both cont1 and cont2 will be in the same Network.\"), mdx(\"p\", null, \"Now, you can simply use the Container names to let them communicate with each other - again,\\nDocker will resolve the IP for you (see above).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"fetch('cont1/my-data').then(...)\\n\")), mdx(Link, {\n    to: \"/posts\",\n    className: \"btn center-btn\",\n    mdxType: \"Link\"\n  }, \"all posts\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#docker-basics-part-3","title":"Docker Basics Part 3","items":[{"url":"#networks--requests","title":"Networks / Requests","items":[{"url":"#communicating-with-the-world-wide-web-www","title":"Communicating with the World Wide Web (WWW)"}]},{"url":"#communicating-with-the-host-machine","title":"Communicating with the Host Machine"},{"url":"#communicating-with-other-containers","title":"Communicating with Other Containers"}]}]},"frontmatter":{"title":"Docker Basics - Part 3, Docker Networks","author":"youngjae lim","category":"Docker","slug":"docker-basics-part3","date":"March 27th, 2021","readTime":10,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/a378300f3065a02a9dae99aedcfcade4/456c9/main_docker_networks.png","srcSet":"/static/a378300f3065a02a9dae99aedcfcade4/5653b/main_docker_networks.png 374w,\n/static/a378300f3065a02a9dae99aedcfcade4/0639f/main_docker_networks.png 747w,\n/static/a378300f3065a02a9dae99aedcfcade4/456c9/main_docker_networks.png 1494w","sizes":"(min-width: 1494px) 1494px, 100vw"},"sources":[{"srcSet":"/static/a378300f3065a02a9dae99aedcfcade4/c306b/main_docker_networks.webp 374w,\n/static/a378300f3065a02a9dae99aedcfcade4/cf37f/main_docker_networks.webp 747w,\n/static/a378300f3065a02a9dae99aedcfcade4/bfae5/main_docker_networks.webp 1494w","type":"image/webp","sizes":"(min-width: 1494px) 1494px, 100vw"}]},"width":1494,"height":1028}}},"embeddedImages":null,"videoSourceURL":null,"videoTitle":null}}},"pageContext":{"slug":"docker-basics-part3"}},"staticQueryHashes":["3827573359","3981428836"]}