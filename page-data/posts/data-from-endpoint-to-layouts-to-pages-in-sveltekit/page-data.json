{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/data-from-endpoint-to-layouts-to-pages-in-sveltekit","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Data From Endpoint To Layout and Pages In SvelteKit\",\n  \"slug\": \"data-from-endpoint-to-layouts-to-pages-in-sveltekit\",\n  \"image\": \"./images/main_sveltekit.png\",\n  \"date\": \"2022-04-01T00:00:00.000Z\",\n  \"author\": \"youngjae lim\",\n  \"published\": true,\n  \"category\": \"SvelteKit\",\n  \"tags\": [\"sveltekit\", \"front-end\"],\n  \"readTime\": 10,\n  \"embeddedImages\": [\"./images/config_result.png\", \"./images/final_result.png\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"overview\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Overview\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#overview\",\n    \"aria-label\": \"overview permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"p\", null, \"In this article, we will create a standalone endpoint in SvelteKit and fetch data from the endpoint and load the fetched data into a layout page so that we can access the same data from any descendant pages that are wrapped around by the layout page.\"), mdx(\"h2\", {\n    \"id\": \"standalone-endpoints\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Standalone Endpoints\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#standalone-endpoints\",\n    \"aria-label\": \"standalone endpoints permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"p\", null, \"According to the official SvelteKit doc, Endpoints are:\"), mdx(\"blockquote\", {\n    display: \"info\"\n  }, \"Endpoints are modules written in .js or .ts files that export request handler functions corresponding to HTTP methods. Their job is to make it possible to read and write data that is only available on the server (for example in a database, or on the filesystem).\"), mdx(\"p\", null, \"There are two types of endpoints in SvelteKit:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type of Endpoint\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Explanation\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Page Endpoint\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"an endpoint that has the same filename as a page(except for the extension)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Standalone Endpoint\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"an endpoint that is separate from pages\")))), mdx(\"p\", null, \"Let's say there is a configuration json file in your OS home directory and you want to display that information in a main page of your SvelteKit web application. For example, I created the following file in the home directory on my Mac mini.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"name\\\": \\\"Youngjae Jay Lim\\\",\\n  \\\"description\\\": \\\"Human\\\"\\n}\\n\")), mdx(\"p\", null, \"To read the configuration json file and return as data, you need to create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.js\"), \" file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/routes/\"), \" directory like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/routes/config.js\",\n    \"file\": \"./src/routes/config.js\"\n  }, \"import os from 'os'\\nimport fs from 'fs'\\nimport path from 'path'\\n\\nconst config = JSON.parse(\\n  fs.readFileSync(path.join(os.homedir(), 'config.json'), 'utf-8')\\n)\\n\\nexport async function get() {\\n  if (config) {\\n    return {\\n      body: config,\\n    }\\n  }\\n\\n  return {\\n    status: 404,\\n  }\\n}\\n\")), mdx(\"p\", null, \"Please open up your web browser and access \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3000/config\"), \". You should see a result as following:\"), mdx(GatsbyImage, {\n    image: getImage(props.embeddedImages[0]),\n    alt: \"sveltekit\",\n    mdxType: \"GatsbyImage\"\n  }), mdx(\"p\", null, \"This is a standalone endpoint because it is not tied to a page with the same filename(say, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/routes/config.svelte\"), \"). We will fetch data from this enpoint in a layout page in the next section.\"), mdx(\"h2\", {\n    \"id\": \"layout-data-loading\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Layout Data Loading\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#layout-data-loading\",\n    \"aria-label\": \"layout data loading permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"h3\", {\n    \"id\": \"what-is-layout-page\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"What is Layout Page\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#what-is-layout-page\",\n    \"aria-label\": \"what is layout page permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"p\", null, \"Now that we've created the endpoint, we can fetch data in a layout page. The layout is an element that should be visible on every page you navigate, which could have a navigation bar or a footer. Without layout components, you have to repeat the nav bar or footer for every page. Due to this nature of layout page, you can also fetch data from any endpoint that will be accessible to any nested pages and components.\"), mdx(\"h3\", {\n    \"id\": \"how-to-fetch-data-in-a-page\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"How to fetch data in a page\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#how-to-fetch-data-in-a-page\",\n    \"aria-label\": \"how to fetch data in a page permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"p\", null, \"To fetch data in a page, we will utilize a SvelteKit built-in function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load()\"), \" that runs \", mdx(\"mark\", null, \"before\"), \" the component is created. This way, we can fetch and manipulate data before the page is rendered. The SvelteKit official documentation puts an emphasis on:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"load()\"), \" function runs \", mdx(\"mark\", null, \"both during server-side rendering and in the client.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"load\"), \" applies to only \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"page\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"layout\"), \" components(not components thay import). In other words, you \", mdx(\"mark\", null, \"can't use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"load()\"), \" in a regular component\"), \"(for instance, a component in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./src/lib/\"), \" directory).\")), mdx(\"p\", null, \"To create a default layout in SvelteKit, you create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__layout.svelte\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/routes/\"), \" directory.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/routes/__layout.svelte highlights=1,2,4,10\",\n    \"file\": \"./src/routes/__layout.svelte\",\n    \"highlights\": \"1,2,4,10\"\n  }, \"<script context=\\\"module\\\">\\n  export async function load({ fetch }) {\\n    const url = \\\"/config\\\";\\n    const res = await fetch(url);\\n\\n    if (res.ok) {\\n      const config = await res.json();\\n      return {\\n        props: {},\\n        stuff: { config },\\n      };\\n    }\\n\\n    return {\\n      status: res.status,\\n      error: new Error(`Could not load ${url}`),\\n    };\\n  }\\n</script>\\n\\n<slot />\\n\")), mdx(\"h3\", {\n    \"id\": \"what-this-does\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"What this does\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#what-this-does\",\n    \"aria-label\": \"what this does permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"p\", null, \"First, we have a script tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script context=\\\"module\\\">\"), \" that allows \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load()\"), \" to run before the page is rendered.\"), mdx(\"p\", null, \"Secondly, as you see, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load\"), \" receives an implementation of SvelteKit-provided \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" wrapper. This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" made a request to our app's own endpoint \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/config\"), \" that we've created earlier without issuing an HTTP. As a result of fetch, we get a copy of the response that is sent embedded in the initial page load.\"), mdx(\"p\", null, \"Please also pay attention to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stuff\"), \" variables in the return object. I intentionally put config variable to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stuff\"), \", not \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \" because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \" will be an empty object for:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"layout components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pages without endpoints\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stuff\"), \" is passed from the layout page to any nested pages, you can literally put any stuffs to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stuff\"), \" that will be available to subsequesnt \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load\"), \" functions. We will see how we can access \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stuff\"), \" from the nested page in the next section.\"), mdx(\"h2\", {\n    \"id\": \"page\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Page\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#page\",\n    \"aria-label\": \"page permalink\",\n    \"className\": \"autolink after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"p\", null, \"Now that we have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config\"), \" data available through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stuff\"), \" in our layout page, we can use it in a main page of our app. In similar to what we did in the layout page to fetch data from an endpoint, we will use the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load()\"), \" to retrieve \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stuff\"), \" object that is already available to the nested main page via the layout page.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/routes/index.svelte\",\n    \"file\": \"./src/routes/index.svelte\"\n  }, \"<script context=\\\"module\\\">\\n  export async function load({ stuff }) {\\n    const { config } = stuff;\\n    return {\\n      props: { config },\\n    };\\n  }\\n</script>\\n\\n<script>\\n  export let config;\\n</script>\\n\\n<main>\\n  <h1>Who am I?</h1>\\n  <p>Name: {config.name}</p>\\n  <p>Description: {config.description}</p>\\n</main>\\n\")), mdx(\"p\", null, \"Make sure to spin up dev server and access \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3000\"), \" in a browser:\"), mdx(GatsbyImage, {\n    image: getImage(props.embeddedImages[1]),\n    alt: \"sveltekit\",\n    mdxType: \"GatsbyImage\"\n  }), mdx(\"p\", null, \"That's all for this article. Now you can create a simple endpoint and fetch data from it and pass it onto other pages all happenning withing a single SvelteKit web application. If you have any questions, please feel free to leave a commnet below.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#standalone-endpoints","title":"Standalone Endpoints"},{"url":"#layout-data-loading","title":"Layout Data Loading","items":[{"url":"#what-is-layout-page","title":"What is Layout Page"},{"url":"#how-to-fetch-data-in-a-page","title":"How to fetch data in a page"},{"url":"#what-this-does","title":"What this does"}]},{"url":"#page","title":"Page"}]},"frontmatter":{"title":"Data From Endpoint To Layout and Pages In SvelteKit","author":"youngjae lim","category":"SvelteKit","tags":["sveltekit","front-end"],"slug":"data-from-endpoint-to-layouts-to-pages-in-sveltekit","date":"April 1st, 2022","readTime":10,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8d8e8","images":{"fallback":{"src":"/static/f6b237014ec1dc2c335d279f655250b9/84085/main_sveltekit.png","srcSet":"/static/f6b237014ec1dc2c335d279f655250b9/f3329/main_sveltekit.png 258w,\n/static/f6b237014ec1dc2c335d279f655250b9/dbd92/main_sveltekit.png 515w,\n/static/f6b237014ec1dc2c335d279f655250b9/84085/main_sveltekit.png 1030w","sizes":"(min-width: 1030px) 1030px, 100vw"},"sources":[{"srcSet":"/static/f6b237014ec1dc2c335d279f655250b9/a7bc9/main_sveltekit.webp 258w,\n/static/f6b237014ec1dc2c335d279f655250b9/44f13/main_sveltekit.webp 515w,\n/static/f6b237014ec1dc2c335d279f655250b9/5543e/main_sveltekit.webp 1030w","type":"image/webp","sizes":"(min-width: 1030px) 1030px, 100vw"}]},"width":1030,"height":648},"resize":{"src":"/static/f6b237014ec1dc2c335d279f655250b9/f3583/main_sveltekit.png","width":1200,"height":755}}},"embeddedImages":[{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/9cfb1b55edf87e9c99d36f10c6c4640d/54839/config_result.png","srcSet":"/static/9cfb1b55edf87e9c99d36f10c6c4640d/b46d7/config_result.png 83w,\n/static/9cfb1b55edf87e9c99d36f10c6c4640d/2ace3/config_result.png 166w,\n/static/9cfb1b55edf87e9c99d36f10c6c4640d/54839/config_result.png 331w","sizes":"(min-width: 331px) 331px, 100vw"},"sources":[{"srcSet":"/static/9cfb1b55edf87e9c99d36f10c6c4640d/cca3b/config_result.webp 83w,\n/static/9cfb1b55edf87e9c99d36f10c6c4640d/a523a/config_result.webp 166w,\n/static/9cfb1b55edf87e9c99d36f10c6c4640d/236b0/config_result.webp 331w","type":"image/webp","sizes":"(min-width: 331px) 331px, 100vw"}]},"width":331,"height":148}}},{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/3a6eef5b1c49e3599cbbc558a54eb079/ecdad/final_result.png","srcSet":"/static/3a6eef5b1c49e3599cbbc558a54eb079/bec91/final_result.png 110w,\n/static/3a6eef5b1c49e3599cbbc558a54eb079/5161e/final_result.png 219w,\n/static/3a6eef5b1c49e3599cbbc558a54eb079/ecdad/final_result.png 438w","sizes":"(min-width: 438px) 438px, 100vw"},"sources":[{"srcSet":"/static/3a6eef5b1c49e3599cbbc558a54eb079/fa552/final_result.webp 110w,\n/static/3a6eef5b1c49e3599cbbc558a54eb079/94999/final_result.webp 219w,\n/static/3a6eef5b1c49e3599cbbc558a54eb079/7bab0/final_result.webp 438w","type":"image/webp","sizes":"(min-width: 438px) 438px, 100vw"}]},"width":438,"height":181}}}],"videoSourceURL":null,"videoTitle":null},"excerpt":"Overview In this article, we will create a standalone endpoint in SvelteKit and fetch data from the endpoint and load the fetched data into a layout page so…"}},"pageContext":{"slug":"data-from-endpoint-to-layouts-to-pages-in-sveltekit","previousPost":{"id":"5ce6c9a5-b3a0-591b-be4a-f8ec6cacc25c","frontmatter":{"title":"Vim PlugIn Series - surround.vim","slug":"vim-plugin-series-1-surround-vim","tags":["vim","tool"]},"excerpt":"Overview If you're using  Vim  as your text/code editor, you may have heard about  Tim Pope . He is one of the best in creating vim plugins…"},"nextPost":{"id":"78c83d18-1254-5885-9d6c-566035ec463c","frontmatter":{"title":"How To Pass Data From Layout Page To descendant pages and components In SvelteKit","slug":"how-to-pass-data-from-pages-to-descendant-pages-in-sveltekit","tags":["sveltekit","front-end"]},"excerpt":"Overview In the previous article, we went over how to create a standalone endpoint and fetch data from it in a layout and its descendant…"},"relatedPosts":[{"id":"4d706cd6-1d64-5123-b893-3d5f03ada1f5","frontmatter":{"title":"How To Set Up Tailwind CSS with the SvelteKit","slug":"how-to-setup-tailwind-sveltekit","tags":["sveltekit","tailwindcss","css"]},"excerpt":"Overview This article will show you how to setup  Tailwind CSS  in a  SvelteKit  project. Steps Set up the project and install  taliwindcss…"},{"id":"2e854dec-20f2-54e8-b998-e9631c7576ef","frontmatter":{"title":"SvelteKit With Headless WordPress as CMS","slug":"sveltekit-with-headless-wordpress-cms","tags":["sveltekit","cms","wordpress","graphql"]},"excerpt":"Overview This article will show you how to get started with development of SvelteKit front-end web application using headless WordPress as a…"},{"id":"78c83d18-1254-5885-9d6c-566035ec463c","frontmatter":{"title":"How To Pass Data From Layout Page To descendant pages and components In SvelteKit","slug":"how-to-pass-data-from-pages-to-descendant-pages-in-sveltekit","tags":["sveltekit","front-end"]},"excerpt":"Overview In the previous article, we went over how to create a standalone endpoint and fetch data from it in a layout and its descendant…"}]}},"staticQueryHashes":["1552795008","240803378","3156252089"]}